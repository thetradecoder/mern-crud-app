{"version":3,"sources":["components/navbar.component.js","components/addtask.component.js","components/edittask.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","AddTask","useState","username","setUsername","description","setDescription","taskheading","setTaskheading","Date","startdate","setStartdate","deadline","setDeadline","editpassword","setEditpassword","onSubmit","e","preventDefault","type","value","onChange","target","required","rows","cols","selected","date","EditTask","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d12bb54f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default function Navbar(){\r\n\r\n        return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <Link to=\"/mern-crud-app/\" className=\"navbar-brand\">tradecoder</Link>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\"><Link to=\"/mern-crud-app/\" className=\"nav-link\">Todo List</Link></li>\r\n                <li className=\"nav-item\"><Link to=\"/mern-crud-app/add/\" className=\"nav-link\">Add Task</Link></li>\r\n                <li className=\"nav-item\"><Link to=\"/mern-crud-app/edit/\" className=\"nav-link\">Edit Task</Link></li>\r\n                <li className=\"nav-item\"><Link to=\"/mern-crud-app/signup/\" className=\"nav-link\">Signup</Link></li>\r\n            </ul>\r\n        </nav>\r\n        );    \r\n}","import React, {useState} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\nexport default function AddTask (){\r\n   \r\n        const [username, setUsername]=useState(\"\");\r\n        const [description, setDescription]=useState(\"\");\r\n        const [taskheading, setTaskheading] = useState(\"\");\r\n        const [startdate, setStartdate]= useState(new Date());\r\n        const [deadline, setDeadline] = useState(new Date());\r\n        const [editpassword, setEditpassword]=useState(\"\");\r\n\r\n        function  onChangeUsername(e){\r\n            setUsername(e.target.value)\r\n        }\r\n        \r\n        function onChangeDescription(e){\r\n            setDescription(e.target.value);\r\n        }\r\n        \r\n        function onChangeTaskHeading(e){\r\n            setTaskheading(e.target.value)\r\n        }\r\n\r\n        function onChangeStartDate(date){\r\n            setStartdate(date)     \r\n         }\r\n\r\n         function onChangeDeadline(date){\r\n            setDeadline(date)\r\n        }\r\n        \r\n        function onChangeEditPassword(e){\r\n            setEditpassword(e.target.value)\r\n        }\r\n\r\n        function onSubmitTask(e){\r\n            e.preventDefault();\r\n            // come back here after finishing backend work\r\n\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <h2 className=\"text-center\">Add New Task</h2>\r\n                <form onSubmit={onSubmitTask}>\r\n                    <div className=\"form-group\">\r\n                        <label>User name:</label>\r\n                        <input type=\"text\" className=\"form-control\" value={username} onChange={onChangeUsername} required />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Task heading</label>\r\n                        <input type=\"text\" className=\"form-control\" value={taskheading} onChange={onChangeTaskHeading} required />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Description:</label>\r\n                        <textarea rows=\"3\" cols=\"50\" className=\"form-control\" value={description} onChange={onChangeDescription} required></textarea>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Start date:</label> <br/>\r\n                        <DatePicker selected={startdate} onChange={onChangeStartDate}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Deadline:</label><br/>\r\n                        <DatePicker selected={deadline} onChange={onChangeDeadline} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Edit Password :</label>\r\n                        <input type=\"password\" className=\"form-control\" value={editpassword} onChange={onChangeEditPassword} required />\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n}   \r\n   \r\n","import React, {useState} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default function EditTask(){\r\n    \r\n    const [username]=useState(\"Registered User\");\r\n    const [taskheading, setTaskheading]= useState(\"\");\r\n    const [description, setDescription]= useState(\"\");\r\n    const [startdate, setStartdate]= useState(new Date());\r\n    const [deadline, setDeadline]= useState(new Date());\r\n    const [editpassword, setEditpassword]=useState(\"\");\r\n\r\n    function onChangeTaskHeading(e){\r\n        setTaskheading(e.target.value)\r\n    }\r\n\r\n    function onChangeDescription(e){\r\n        setDescription(e.target.value)\r\n    }\r\n\r\n    function onChangeStartDate(date){\r\n        setStartdate(date)\r\n    }\r\n\r\n    function onChangeDeadline(date){\r\n        setDeadline(date)\r\n    }\r\n\r\n    function onChangeEditPassword(e){\r\n        setEditpassword(e.target.value)\r\n    }\r\n\r\n    function onEditSubmit(e){\r\n        e.preventDefault();\r\n        // complete this function after the backend work\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <h2 className=\"text-center\">Edit Task</h2>\r\n            <form onSubmit={onEditSubmit}>\r\n                <div className=\"form-group\">\r\n                    <p>User name:<strong> {username} </strong> ** User_name not be changed</p>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                        <label>Task heading</label>\r\n                        <input type=\"text\" className=\"form-control\" value={taskheading} onChange={onChangeTaskHeading} required />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Description:</label>\r\n                        <textarea rows=\"3\" cols=\"50\" className=\"form-control\" value={description} onChange={onChangeDescription} required></textarea>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Start date:</label> <br/>\r\n                        <DatePicker selected={startdate} onChange={onChangeStartDate}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Deadline:</label><br/>\r\n                        <DatePicker selected={deadline} onChange={onChangeDeadline} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Password (Edit password that you put while creating this task):</label>\r\n                        <input type=\"password\" className=\"form-control\" value={editpassword} onChange={onChangeEditPassword} required />\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </div>\r\n            </form>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport Navbar from './components/navbar.component';\nimport AddTask from './components/addtask.component';\nimport EditTask from './components/edittask.component';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <h1 className=\"text-center\">MERN Stack Todo App<br/> (under development)</h1>\n      <Route path=\"/mern-crud-app/add\" component={AddTask}/>\n      <Route path=\"/mern-crud-app/edit\" component={EditTask}/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}